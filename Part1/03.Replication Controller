# Deployment 생성 및 확인
kubectl create deployment nginx-deployment --replicas=3 --image=nginx --dry-run=client -o yaml > 3-nginx-deploy.yaml
cat 3-nginx-deploy.yaml
kubectl apply -f 3-nginx-deploy.yaml
kubectl get deployments nginx-deployment -o wide
kubectl get pod
kubectl get replicasets
kubectl scale deployment nginx-deployment --replicas=6
cat 3-nginx-deploy.yaml
kubectl get replicasets
kubectl get pod
kubectl apply -f 3-nginx-deploy.yaml
kubectl delete pod 파드이름 #지웠을때 개수 확인
kubectl get pod

# 다음 실습을 위해 삭제
kubectl delete deployments nginx-deployment

## Rolling Update
#1.16 nginx 이미지로 생성
kubectl create deployment mynginx --image=nginx:1.16-alpine

# 위 명령어로 생성된 상태 확인
kubectl get deployments,replicasets,pods -l app=mynginx

# 파드 늘려보고, 늘어난 파드 확인
kubectl scale deployment mynginx --replicas=3

# 롤아웃 히스토리 확인 (같은 어플리케이션 버젼만 늘려서 아직 revision이 특별히 없음)
kubectl rollout history deployment mynginx

# revision1만 자세히 보고 싶으면 뒤에 옵션 추가
kubectl rollout history deployment mynginx --revision=1

# Strategy Type으로 rolling update 방식 확인
kubectl describe deployment mynginx

# 롤링 업데이트
kubectl set image deployment mynginx nginx=nginx:1.17-alpine

# 롤링 업데이트 후, 롤아웃 히스토리 다시 확인 및 자세히 확인
kubectl rollout history deployment mynginx
kubectl rollout history deployment mynginx --revision=2

# 업그레이드 하면서 모두 새로 만들어졌고, 기존 리플리카셋은 더이상 쓰이지 않음
kubectl get deployments,replicasets,pods -l app=mynginx -A

# 기존 버젼으로 다운그레이드
kubectl rollout undo deployment mynginx --to-revision=1

# 빠르게 아까 봤던거 다시 확인, 빠르게 파드가 생성되고 기존껀 지워짐
kubectl get deployments,replicasets,pods -l app=mynginx -A

# 히스토리 확인
kubectl rollout history deployment mynginx

# 원복
kubectl delete deployment mynginx


### NameSpace
# 네임 스페이스는 동일한 쿠버네티스 클러스터를 기반으로 하는, 여러 가상 클러스터를 의미
# 네임 스페이스 확인
kubectl get pods -A

# 네임 스페이스 생성
kubectl create namespace fastcampus
kubectl run k8s --image=nginx --namespace=fastcampus

# 생성한 파드 확인
kubectl get pods
kubectl get pods -n fastcampus

# 원복
kubectl delete pod k8s -n fastcampus
kubectl delete namespace fastcampus


### MultiContainer Pod
kubectl apply -f multi-container.yaml
# 첫번째 컨테이너에 hello-k8s 파일 생성
kubectl exec -it test-pd -c test-container -- /bin/sh
cd /
ls
cd /cache
touch hello-k8s
ls
exit

# 두번째 컨테이너도 동일한 볼륨을 공유하고 있기에, 생성된 파일이 보임
kubectl exec -it test-pd -c side-car -- /bin/sh
cd /
ls
cd /cache
ls
exit

# 실습 완료시 삭제
kubectl delete pod test-pd


### Init Container
# init container 생성하는 YAML
# init continaer 내 command : mydb와 myservice가 확인되기 전까지 init 컨테이너 지속 유지됨
cat <<EOF | kubectl apply -f -
apiVersion: v1
kind: Pod
metadata:
  name: myapp-pod
  labels:
    app.kubernetes.io/name: MyApp
spec:
  containers:
  - name: myapp-container
    image: busybox:1.28
    command: ['sh', '-c', 'echo The app is running! && sleep 3600']
  initContainers:
  - name: init-myservice
    image: busybox:1.28
    command: ['sh', '-c', "until nslookup myservice.default.svc.cluster.local; do echo waiting for myservice; sleep 2; done"]
  - name: init-mydb
    image: busybox:1.28
    command: ['sh', '-c', "until nslookup mydb.default.svc.cluster.local; do echo waiting for mydb; sleep 2; done"]
EOF

# Pending으로 실행되지 않음을 볼 수 있음. 서비스가 있어야 하기 때문
kubectl get pod myapp-pod
kubectl logs myapp-pod -c init-myservice # Inspect the first init container
kubectl logs myapp-pod -c init-mydb      # Inspect the second init container

# myservice 생성
cat <<EOF | kubectl apply -f -
apiVersion: v1
kind: Service
metadata:
  name: myservice
spec:
  ports:
  - protocol: TCP
    port: 80
    targetPort: 9376
EOF

#mydb 생성
cat <<EOF | kubectl apply -f -
apiVersion: v1
kind: Service
metadata:
  name: mydb
spec:
  ports:
  - protocol: TCP
    port: 80
    targetPort: 9377
EOF


# 정상 확인
kubectl get pod myapp-pod
kubectl logs myapp-pod -c init-myservice # Inspect the first init container
kubectl logs myapp-pod -c init-mydb      # Inspect the second init container

# 삭제
kubectl delete pod myapp-pod
kubectl delete service mydb
kubectl delete service myservice
