### Liveness Probe
kubectl apply -f https://raw.githubusercontent.com/kubernetes/website/main/content/en/examples/pods/probe/exec-liveness.yaml

## 내용 확인
apiVersion: v1
kind: Pod
metadata:
  labels:
    test: liveness
  name: liveness-exec
spec:
  containers:
  - name: liveness
    image: registry.k8s.io/busybox
    args:
    - /bin/sh
    - -c
    - touch /tmp/healthy; sleep 30; rm -f /tmp/healthy; sleep 600
    livenessProbe:
      exec:
        command:
        - cat
        - /tmp/healthy
      initialDelaySeconds: 5  # probe 처음 켜고 5초는 미 계산(딜레이)
      periodSeconds: 5        # 5초마다 kubelet이 확인

# 상태 확인 (describe로 보면 생성 후 30초까지는 정상, 이후 실패로 인한 재시작)
kubectl get pod
kubectl describe pod liveness-exec
kubectl get pod

# 정리
kubectl delete pod liveness-exec


### HTTP 기반 Liveness Probe
kubectl apply -f https://raw.githubusercontent.com/kubernetes/website/main/content/en/examples/pods/probe/http-liveness.yaml

# 내용 확인
apiVersion: v1
kind: Pod
metadata:
  labels:
    test: liveness
  name: liveness-http
spec:
  containers:
  - name: liveness
    image: registry.k8s.io/liveness
    args:
    - /server
    livenessProbe:
      httpGet:
        path: /healthz
        port: 8080
        httpHeaders:
        - name: Custom-Header
          value: Awesome
      initialDelaySeconds: 3
      periodSeconds: 3

## 서버 응답 코드가 200 이상 400 미만 사이면 컨테이너 유지
## 그 외의 응답코드라면 컨테이너 재시작
kubectl describe pod liveness-http
kubectl get pod

# (참고) 서버 코드 : https://github.com/kubernetes/kubernetes/blob/master/test/images/agnhost/liveness/server.go
# 첫 10초동안 해당 코드는 200 리턴, 이후 500 리턴

# 원상복구
kubectl delete pod liveness-http


### Readiness Probe
kubectl apply -f https://raw.githubusercontent.com/kubernetes/website/main/content/en/examples/pods/probe/tcp-liveness-readiness.yaml

# 내용 확인
apiVersion: v1
kind: Pod
metadata:
  name: goproxy
  labels:
    app: goproxy
spec:
  containers:
  - name: goproxy
    image: registry.k8s.io/goproxy:0.1
    ports:
    - containerPort: 8080
    readinessProbe: # 정상일 경우에 Ready로 기입 --> 로드밸런싱 대상
      tcpSocket:
        port: 8080 #8080 포트가 열려있는지 검사
      initialDelaySeconds: 5 #5초후 부터 검사 시작
      periodSeconds: 10
    livenessProbe:
      tcpSocket:
        port: 8080
      initialDelaySeconds: 15
      periodSeconds: 20


# 파드 상태 확인. 8080 포트가 열린 후 정상 기동
kubectl describe pod goproxy
kubectl get pod #를 계속 확인해보면, Running 중이여도 Ready 1은 5초 이후

# 원상복구
kubectl delete pod goproxy


#### Startup Probe
cat <<EOF | kubectl apply -f -
apiVersion: apps/v1
kind: Deployment
metadata:
  name: k8s-probes
  labels:
    app: nginx
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
        - name: nginx
          image: nginx
          ports:
            - containerPort: 80
          startupProbe:
            initialDelaySeconds: 1
            periodSeconds: 2
            timeoutSeconds: 1
            successThreshold: 1
            failureThreshold: 1
            exec:
              command:
                - cat
                - /etc/nginx/nginx.conf
EOF

#정상 확인
kubectl get pod

#startup probe 설정 확인
kubectl describe pod ~


# Startup Probe 비정상으로 업데이트
cat <<EOF | kubectl apply -f -
apiVersion: apps/v1
kind: Deployment
metadata:
  name: k8s-probes
  labels:
    app: nginx
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
        - name: nginx
          image: nginx
          ports:
            - containerPort: 80
          startupProbe:
            initialDelaySeconds: 1
            periodSeconds: 2
            timeoutSeconds: 1
            successThreshold: 1
            failureThreshold: 1
            exec:
              command:
                - cat
                - /etc/nginx/nginx.conf-dont-exists
EOF
