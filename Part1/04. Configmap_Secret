# AWS IAM, OIDC(OpenID Connect) 프로바이더 설정
eksctl utils associate-iam-oidc-provider --region ap-northeast-2 --cluster=my-eks --approve

# AWS EBS CSI Driver에 대한 IAM 역할 부여
eksctl create iamserviceaccount \
  --name ebs-csi-controller-sa \
  --namespace kube-system \
  --cluster my-eks \
  --attach-policy-arn arn:aws:iam::aws:policy/service-role/AmazonEBSCSIDriverPolicy \
  --approve \
  --role-only \
  --role-name AmazonEKS_EBS_CSI_DriverRole

# 설치과정에 각자의 ID를 필요로 하므로 확인
aws sts get-caller-identity

# CSI Driver 를 addon으로 설치
eksctl create addon --name aws-ebs-csi-driver --cluster my-eks --service-account-role-arn arn:aws:iam::111122223333:role/AmazonEKS_EBS_CSI_DriverRole --force

# PVC 생성
cat <<EOT > awsebs-pvc.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: ebs-claim
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 4Gi
  storageClassName: gp2
EOT
kubectl apply -f awsebs-pvc.yaml
kubectl get pvc,pv


# Pod 생성
cat <<EOT > awsebs-pod.yaml
apiVersion: v1
kind: Pod
metadata:
  name: app
spec:
  terminationGracePeriodSeconds: 3
  containers:
  - name: app
    image: centos
    command: ["/bin/sh"]
    args: ["-c", "while true; do echo \$(date -u) >> /data/out.txt; sleep 5; done"]
    volumeMounts:
    - name: persistent-storage
      mountPath: /data
  volumes:
  - name: persistent-storage
    persistentVolumeClaim:
      claimName: ebs-claim
EOT
kubectl apply -f awsebs-pod.yaml
kubectl get pvc,pv,pod

### 볼륨증가 시나리오
# 현재 크기 확인
kubectl exec -it app -- lsblk

nano awsebs-pvc.yaml
kubectl apply -f awsebs-pvc.yaml
4Gi -> 8Gi 로 변경

kubectl apply -f awsebs-pvc.yaml
# 에러발생

# StorageClass의 설정값 변경 필요
kubectl get sc gp2 -o yaml > sc-gp2.yaml
cat sc-gp2.yaml
echo "allowVolumeExpansion: true" >> sc-gp2.yaml
kubectl apply -f sc-gp2.yaml

#재시도 하면 정상적으로 증가
kubectl apply -f awsebs-pvc.yaml

kubectl get pvc
kubectl get pv

#증가 크기 확인
kubectl exec -it app -- lsblk


### Configmap
kubectl create -f https://kubernetes.io/examples/configmap/configmap-multikeys.yaml
kubectl create -f https://kubernetes.io/examples/pods/pod-configmap-envFrom.yaml

# (참고) configmap-multikeys.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: special-config
  namespace: default
data:
  SPECIAL_LEVEL: very
  SPECIAL_TYPE: charm

kubectl get configmap
kubectl describe configmap special-config


# (참고) pod-configmap-envFrom.yaml 
apiVersion: v1
kind: Pod
metadata:
  name: dapi-test-pod
spec:
  containers:
    - name: test-container
      image: k8s.gcr.io/busybox
      command: [ "/bin/sh", "-c", "env" ]
      envFrom:
      - configMapRef:
          name: special-config
  restartPolicy: Never


kubectl logs dapi-test-pod
# 로그 상에 SPECIAL_LEVEL=very 가 있는지 확인


# 원복
kubectl delete configmap special-config
kubectl delete pod dapi-test-pod

### Secrets
# secret create
kubectl create secret generic db-user-pass \
  --from-literal=username=devuser \
  --from-literal=password='1q2w3e4r'

# secret 확인
kubectl get secrets
kubectl describe secrets db-user-pass
kubectl get secret db-user-pass -o jsonpath='{.data}'

# (참고) secret 난독화 복호화
echo '블라블라' | base64 --decode


# Secret을 통해서 Pod에 마운트
cat <<EOF | kubectl apply -f -
apiVersion: v1
kind: Pod
metadata:
  name: mypod
spec:
  containers:
  - name: mypod
    image: redis
    volumeMounts:
    - name: foo
      mountPath: "/etc/foo"
  volumes:
  - name: foo
    secret:
      secretName: db-user-pass
EOF

kubectl exec -it mypod -- /bin/bash
cd /etc/foo
ls
cat username
cat password

# 원복
kubectl delete pod mypod
kubectl delete secrets db-user-pass


### 안전하게 시크릿 관리하는 방법
# (1) Secret 을 볼수 있는 권한 설정
# (2) 저장되는 공간인 etcd를 암호화 (EKS에서는 AWS KMS로 암호화 되고 있음)
